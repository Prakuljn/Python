{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "0f6faad8-61a7-42d9-9d1a-b6c424783758",
   "metadata": {},
   "source": [
    "# NUMPY\n",
    "Numpy --> Numpy is an open-source library that is used for scientific calculations."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "538e8ad8-a537-4218-b853-25a35b64b850",
   "metadata": {},
   "source": [
    "Why numpy is better than list ?\n",
    "\n",
    "1. Numpy(Homogenenous data type) , List(Hetrogenous data type)\n",
    "2. Numpy(time less consumption) , List(more time consumption)\n",
    "3. Numpy(Less memory consume) , List(more memory consume)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f3f5bab4-2509-4b63-9692-871db6d1b782",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "62860b56-8025-458c-a531-7df5667e577b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'list'>\n"
     ]
    }
   ],
   "source": [
    "a = [1,45,89,90]\n",
    "print(type(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "4af21b2c-2212-4f5b-9f59-d301b74eb5e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1 45 89 90]\n",
      "<class 'numpy.ndarray'>\n"
     ]
    }
   ],
   "source": [
    "b = np.array(a)\n",
    "print(b)\n",
    "print(type(b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c83292e1-247a-4b5a-a97a-136bdfc110c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2 3]\n",
      " [4 5 6]\n",
      " [7 8 9]]\n"
     ]
    }
   ],
   "source": [
    "c = [[1,2,3] , [4,5,6] , [7,8,9]]\n",
    "d=np.array(c)\n",
    "print(d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "01e8873d-dff9-420f-9445-e7e4cea43f9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total rows and columns :  (3, 3)\n",
      "Total elements :  9\n",
      "Total dimension :  2\n"
     ]
    }
   ],
   "source": [
    "print(\"Total rows and columns : \" , d.shape) # shape -> num(rows) , num(columns)\n",
    "print(\"Total elements : \",d.size) # size -> num(rows)*num(columns)\n",
    "print(\"Total dimension : \",d.ndim)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "efed5da2-fb1b-40d1-9c27-27ea1f5dd66e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "print(b.ndim)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25bcac4e-a097-48ca-b670-97ea41e68b03",
   "metadata": {},
   "source": [
    "How to create user defined array"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "48ec465f-19b0-4a69-aece-7735da14cfae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter size :  3\n",
      "Enter values :  45\n",
      "Enter values :  78\n",
      "Enter values :  99\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[45 78 99]\n"
     ]
    }
   ],
   "source": [
    "a=[]\n",
    "size = int(input(\"Enter size : \"))\n",
    "for i in range(size):\n",
    "    val = int(input(\"Enter values : \"))\n",
    "    a.append(val)\n",
    "#print(a)\n",
    "b=np.array(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c5fc3c8-b4ae-4d18-8188-3caa8c692d86",
   "metadata": {},
   "source": [
    "Pre defined function of numpy\n",
    "\n",
    "1. zeros() --> It will create an array in which all the values will be 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "d556dc9d-377f-432b-bde0-44256ffd6f1c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0. 0. 0.]\n"
     ]
    }
   ],
   "source": [
    "a=np.zeros(3)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "22dc06a1-8f70-416a-ba59-ccef2155d314",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "a=np.zeros((3,4))\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "797995f5-50ae-46e7-b52e-6ffbecf0c793",
   "metadata": {},
   "source": [
    "2. ones() --> It will create an array in which all the values will be 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "83020966-a2e0-4120-b297-a38dd8d46d36",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1. 1. 1. 1.]\n"
     ]
    }
   ],
   "source": [
    "a=np.ones(4)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "125e586b-ea4c-4f88-a33c-bdfd97902ebd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]\n",
      " [1. 1. 1. 1. 1.]]\n"
     ]
    }
   ],
   "source": [
    "a=np.ones((4,5))\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31f1bbaa-ad5a-46d9-b152-2abd2868d799",
   "metadata": {},
   "source": [
    "3. eye() --> It will create an array in which diagonal positional elements will be 1 and rest all are 0."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "eb4c3d84-edbd-4541-aac2-f36dfcea4243",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0. 0.]\n",
      " [0. 1. 0. 0. 0.]\n",
      " [0. 0. 1. 0. 0.]\n",
      " [0. 0. 0. 1. 0.]\n",
      " [0. 0. 0. 0. 1.]]\n"
     ]
    }
   ],
   "source": [
    "a=np.eye(5,5) # num(row)=num(columns) --> Symmetric Matrix\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "9d6ccd20-135e-439b-987a-cc6699b9acbc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1. 0. 0. 0.]\n",
      " [0. 1. 0. 0.]\n",
      " [0. 0. 1. 0.]]\n"
     ]
    }
   ],
   "source": [
    "a=np.eye(3,4) # num(row)!=num(columns) --> Asymmetric Matrix\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "883a1e2f-36f2-4e62-b945-8e15cfc3ea8a",
   "metadata": {},
   "source": [
    "4. diag() --> It will create an array that will set diagonal positional custom values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "5b6e0a01-1ee4-4889-aa5d-62171863a3ad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[   1    0    0    0]\n",
      " [   0   46    0    0]\n",
      " [   0    0   88    0]\n",
      " [   0    0    0 9000]]\n"
     ]
    }
   ],
   "source": [
    "a=np.diag([1,46,88,9000])\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bdf2b3b0-e058-4ced-96ea-85ef87098f19",
   "metadata": {},
   "source": [
    "# Random Module\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a03752c-2143-4d1f-8470-43e66c131f1c",
   "metadata": {},
   "source": [
    "1. Randint() --> It will generate random values based on fix criteria.\n",
    "   np.random.randint(min_range,max_range,total_numbers)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2e27a4f5-d609-4077-8deb-c9c7ec687d7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[5 2 5]\n"
     ]
    }
   ],
   "source": [
    "a=np.random.randint(1,10,3)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cb2686e1-beb8-4b1e-bd7c-ecd247f22204",
   "metadata": {},
   "source": [
    "2. Rand() --> It will generate random numbers from 0 to 1."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "73dad11e-da7b-410c-ac41-e1eb649a5407",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.61263603 0.54571319 0.97901106 0.82403818 0.47138188]\n"
     ]
    }
   ],
   "source": [
    "a=np.random.rand(5)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37904107-fc76-4c26-a8ae-99b1971b0a16",
   "metadata": {},
   "source": [
    "3. seed() --> It will fix our random generated data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "1e786aee-a2fa-4299-a5a5-bc2283fe1982",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[6 6 5]\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(30)\n",
    "a=np.random.randint(1,10,3)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e338aaa5-4957-4286-818a-0938fdc3e155",
   "metadata": {},
   "source": [
    "# View vs Copy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "891dd084-32ec-48c7-8f08-ef04745a3f3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0]\n",
      "[10 20 30  0  0  0 70 80]\n"
     ]
    }
   ],
   "source": [
    "a=np.array([10,20,30,40,50,60,70,80])  # View method\n",
    "b=a[3:6]\n",
    "b[:]=0\n",
    "print(b)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "78812b63-8f50-4b3d-bf3e-df35d9498b25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 0]\n",
      "[10 20 30 40 50 60 70 80]\n"
     ]
    }
   ],
   "source": [
    "a=np.array([10,20,30,40,50,60,70,80])  # Copy method\n",
    "b=a[3:6].copy()\n",
    "b[:]=0\n",
    "print(b)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9af7cbbb-3554-4eb7-abd1-edf0bf0bdd71",
   "metadata": {},
   "source": [
    "# Reshaping the Array"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ccf49f1-07a1-4cd2-a235-d4ce19219762",
   "metadata": {},
   "source": [
    "n(rows)*n(columns)=n(total_elements)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "9b28542f-5969-45a9-8f5a-5827f01d53a0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[13 24  3 18 47  4 42  8  2 46 36 19]\n"
     ]
    }
   ],
   "source": [
    "a=np.random.randint(1,50,12)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2b517c95-09e0-4606-9947-88256a6cf801",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13 24  3 18 47  4]\n",
      " [42  8  2 46 36 19]]\n"
     ]
    }
   ],
   "source": [
    "print(a.reshape(2,6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "aa73959a-de54-4132-9d7c-81bb4ea3d581",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13 24]\n",
      " [ 3 18]\n",
      " [47  4]\n",
      " [42  8]\n",
      " [ 2 46]\n",
      " [36 19]]\n"
     ]
    }
   ],
   "source": [
    "print(a.reshape(6,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "d6404737-e154-4647-a1b4-31d90ac2dc80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13 24  3 18]\n",
      " [47  4 42  8]\n",
      " [ 2 46 36 19]]\n"
     ]
    }
   ],
   "source": [
    "print(a.reshape(3,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "93f9cfde-2a4c-45df-8c33-ce4575bc632b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[13 24  3]\n",
      " [18 47  4]\n",
      " [42  8  2]\n",
      " [46 36 19]]\n"
     ]
    }
   ],
   "source": [
    "print(a.reshape(4,3))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7967d8ce-9c39-4ca5-ae9d-f1080c11f81a",
   "metadata": {},
   "source": [
    "# Conditional Selection in Numpy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "117073db-b555-4737-853c-91b2ccd9a5c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12 13 14]\n"
     ]
    }
   ],
   "source": [
    "a=np.arange(1,15)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "609944c9-15e8-4600-b2e4-b983a352a3ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False False False False False False False False False False  True  True\n",
      "  True  True]\n"
     ]
    }
   ],
   "source": [
    "print(a>10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9d5635d7-0a84-4d3b-be6a-0b3d14794133",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[11 12 13 14]\n"
     ]
    }
   ],
   "source": [
    "b=a>10\n",
    "print(a[b])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "a1a22c92-7dc0-4b1f-b34a-c96789ffb62c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 2  4  6  8 10 12 14]\n"
     ]
    }
   ],
   "source": [
    "print(a[a%2==0])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "57ccafff-7c6d-4747-b618-dd91f361ead7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  4  9 16]\n"
     ]
    }
   ],
   "source": [
    "a=np.array([1,2,3,4])\n",
    "print(a**2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ffe234b0-16f8-45b1-91d2-533ff4d560b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  8 27 64]\n"
     ]
    }
   ],
   "source": [
    "print(a**3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "cb4f30d5-9557-4ef9-a6f7-4819a90b4600",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.84147098  0.90929743  0.14112001 -0.7568025 ]\n"
     ]
    }
   ],
   "source": [
    "print(np.sin(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "14a5df6d-6cc6-4f3d-9594-3e4c178f7c87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 0.54030231 -0.41614684 -0.9899925  -0.65364362]\n"
     ]
    }
   ],
   "source": [
    "print(np.cos(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "c8bf3334-3760-4660-a08e-9844257e33a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.         1.41421356 1.73205081 2.        ]\n"
     ]
    }
   ],
   "source": [
    "print(np.sqrt(a))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "44f10e02-d995-4a09-b4ed-c8909e8cb72b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1 2]\n",
      " [3 4]]\n"
     ]
    }
   ],
   "source": [
    "a=np.array([1,2,3,4]).reshape(2,2)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b29b2b5c-70d3-4370-9534-a861cee28d87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[5 6]\n",
      " [7 8]]\n"
     ]
    }
   ],
   "source": [
    "b=np.array([5,6,7,8]).reshape(2,2)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "51400b44-b961-4c31-8791-cdce5eab1289",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 6  8]\n",
      " [10 12]]\n"
     ]
    }
   ],
   "source": [
    "print(a+b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "1dd001ac-bb6d-4abc-a5b1-5bb33303ba13",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[-4 -4]\n",
      " [-4 -4]]\n"
     ]
    }
   ],
   "source": [
    "print(a-b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "c7a7f62f-cb11-4c8a-86c6-f429b598561b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[19 22]\n",
      " [43 50]]\n"
     ]
    }
   ],
   "source": [
    "print(a.dot(b)) # for matrix multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ffad2fe0-c9f8-4931-81a0-d151528272a7",
   "metadata": {},
   "source": [
    "Unique() --> It will return 3 arrays.\n",
    "1. Arr --> Unique value store\n",
    "2. return_index = True --> In which indexing we have unique values\n",
    "3. return_counts = True --> Frequency of each element"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "554e452a-d606-4a77-ac32-4f4f12fb53c1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1 2 2 3 3 3 3 3 1 1 2 7 8 4]\n"
     ]
    }
   ],
   "source": [
    "a=np.array([1,2,2,3,3,3,3,3,1,1,2,7,8,4])\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c2870002-750d-43e5-bed0-1e0015771a44",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(array([1, 2, 3, 4, 7, 8]), array([ 0,  1,  3, 13, 11, 12], dtype=int64), array([3, 3, 5, 1, 1, 1], dtype=int64))\n"
     ]
    }
   ],
   "source": [
    "print(np.unique(a,return_index = True, return_counts = True))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9ebb9c9a-1a4c-4a6a-b3f5-4e88da87d896",
   "metadata": {},
   "source": [
    "Linspace() --> It will create an array in which gap of values are equal."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4ec9d76d-2981-45e9-b5c8-af76e636ca56",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.   1.25 1.5  1.75 2.  ]\n"
     ]
    }
   ],
   "source": [
    "a=np.linspace(1,2,5)\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c1267504-8cff-45bf-bdde-f136222ca39a",
   "metadata": {},
   "source": [
    "# Stacking in Numpy"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5cf268e8-88ae-4b35-83b9-c416271951a4",
   "metadata": {},
   "source": [
    "hstack()  --> It will combine arrays horizontally."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ca253456-b07a-4373-8db7-29da066c7f2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "a=np.array([1,2,3,4])\n",
    "b=np.array([5,6,7,8])\n",
    "c=np.array([9,10,11,12])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "07e41a90-8ac2-4b48-8ef3-b01ae6036916",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 1  2  3  4  5  6  7  8  9 10 11 12]\n"
     ]
    }
   ],
   "source": [
    "print(np.hstack((a,b,c)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "135ccb75-095b-459c-abe1-e1b7b8c0966b",
   "metadata": {},
   "source": [
    "vstack() --> It will combined arrays vertically."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "2d8851ce-cee2-4230-b5d1-ca0bf9db234e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 1  2  3  4]\n",
      " [ 5  6  7  8]\n",
      " [ 9 10 11 12]]\n"
     ]
    }
   ],
   "source": [
    "print(np.vstack((a,b,c)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
